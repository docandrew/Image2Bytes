// F# code for converting a .jpg into a 16-bpp raw byte array suitable for
// use as a D ubyte[] variable.
// 
// 
// by Jon Andrew
//
//This is free and unencumbered software released into the public domain.

//Anyone is free to copy, modify, publish, use, compile, sell, or
//distribute this software, either in source code form or as a compiled
//binary, for any purpose, commercial or non-commercial, and by any
//means.

//In jurisdictions that recognize copyright laws, the author or authors
//of this software dedicate any and all copyright interest in the
//software to the public domain. We make this dedication for the benefit
//of the public at large and to the detriment of our heirs and
//successors. We intend this dedication to be an overt act of
//relinquishment in perpetuity of all present and future rights to this
//software under copyright law.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.

//For more information, please refer to <http://unlicense.org/>

open System
open System.IO
open System.Windows.Forms
open System.Drawing
open System.Drawing.Imaging

let form = new Form()
let pb = new PictureBox()
let orig = new Bitmap(@"fortress.jpg")
let reformatted = orig.Clone(new Rectangle(0, 0, orig.Width, orig.Height), PixelFormat.Format16bppRgb565)

// load our reformatted image as an array of bytes
let rawimg = reformatted.LockBits(new Rectangle(0,0,reformatted.Width,reformatted.Height),
                                  ImageLockMode.ReadOnly,reformatted.PixelFormat)
let ptr = rawimg.Scan0
let stride = rawimg.Stride
let bytesize = stride * reformatted.Height
let values : byte[] = Array.zeroCreate bytesize
System.Runtime.InteropServices.Marshal.Copy(ptr, values, 0, bytesize)
reformatted.UnlockBits(rawimg)

// Convert bytes to a sequence of strings
let hexes = Seq.map (sprintf "0x%02X") (values)

// Chunk each of the strings into a sequence of 16-sized arrays
let chunked = Seq.chunkBySize 16 hexes
let hexlines = Seq.map (String.concat ", ") chunked

// Combine with final comma, newline
let outstring = String.concat ",\n" hexlines

// Dump it to file
let outFile = new StreamWriter(@"out.d")
outFile.WriteLine (sprintf "// Generated by Image2Bytes, by Jon Andrew 2019")
outFile.WriteLine (sprintf "immutable ubyte[] imageBytes = [")
outFile.WriteLine (outstring)
outFile.WriteLine (sprintf "];")
outFile.Flush()
outFile.Close()

pb.Image <- reformatted
pb.SizeMode <- PictureBoxSizeMode.AutoSize
form.Controls.Add(pb)

[<STAThread>]
do
  Application.Run(form)
